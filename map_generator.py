import pandas as pd
import geopandas as gpd
import folium
from difflib import get_close_matches
from unidecode import unidecode
from branca.colormap import linear
import re # For extracting scenario labels

# === DOSYA YOLLARI ===
# Use the new CSV file generated by the modified main.py
csv_path = 'optimum_yesil_alan_sonuclari_SCENARIOS.csv'
geojson_path = 'data/istanbul-districts.json' # Make sure this path is correct

# === VERİYİ OKU ===
try:
    df = pd.read_csv(csv_path)
except FileNotFoundError:
    print(f"Error: CSV file not found at {csv_path}")
    print("Please run the modified main.py first to generate the scenario results CSV.")
    exit()

try:
    gdf = gpd.read_file(geojson_path)
except Exception as e:
    print(f"Error reading GeoJSON file at {geojson_path}: {e}")
    print("Please ensure the GeoJSON file exists and is valid.")
    exit()


# === İLÇE ADLARINI NORMALİZE ETME ===
def normalize(name):
    return unidecode(str(name)).casefold().strip()

geo_ilce_names = [normalize(x) for x in gdf['name']]
df['ILCE_normalized'] = df['ILCE'].apply(normalize)

# === EN YAKIN EŞLEŞMEYİ BUL ===
def match_ilce_name(name, geo_names):
    match = get_close_matches(normalize(name), geo_names, n=1, cutoff=0.6)
    return match[0] if match else None

df['Geojson_Ad'] = df['ILCE_normalized'].apply(lambda x: match_ilce_name(x, geo_ilce_names))


# === EŞLEŞMEYEN VAR MI? ===
unmatched = df[df['Geojson_Ad'].isnull()]
if not unmatched.empty:
    print("Warning: Unmatched district names from CSV:")
    for जिला in unmatched['ILCE'].tolist(): # Corrected variable name from 'ilçe' to 'जिला' (district in Hindi, example)
        print(f"- '{जिला}' (Normalized: '{normalize(जिला)}') could not be matched to GeoJSON names.")
    # print("GeoJSON names (normalized):", sorted(list(set(geo_ilce_names))))


# === EŞLEŞMİŞ VERİLERLE BİRLEŞTİR ===
gdf['name_normalized'] = gdf['name'].apply(normalize)
# Use how='left' to keep all GeoJSON districts, even if some don't have data from CSV
# Or how='inner' if you only want districts present in both
merged_gdf = gdf.merge(df, left_on='name_normalized', right_on='Geojson_Ad', how='inner')

if merged_gdf.empty:
    print("Error: Merged DataFrame is empty. Check district name matching and CSV content.")
    if not unmatched.empty:
         print("There were unmatched districts. This might be the cause.")
    else:
         print("No districts were unmatched, but the merge still resulted in an empty GeoDataFrame.")
         print("Please check CSV columns ('ILCE') and GeoJSON properties ('name') for consistency.")
    exit()


# === HARİTA OLUŞTUR ===
m = folium.Map(location=[41.0082, 28.9784], zoom_start=9) # Adjusted zoom for Istanbul

# === SCENARIO KOLONLARINI BUL VE KATMANLARI OLUŞTUR ===
# Regex to find scenario columns like 'Yeni_Yapilacak_Yesil_Alan_GA_W1_0.2_W2_0.8'
ga_pattern = re.compile(r"Yeni_Yapilacak_Yesil_Alan_GA_(W1_\d\.\d_W2_\d\.\d)")
pso_pattern = re.compile(r"Yeni_Yapilacak_Yesil_Alan_PSO_(W1_\d\.\d_W2_\d\.\d)")

ga_scenario_cols = {} # Dict to store {label: col_name}
pso_scenario_cols = {} # Dict to store {label: col_name}

for col in df.columns:
    ga_match = ga_pattern.match(col)
    if ga_match:
        ga_scenario_cols[ga_match.group(1)] = col
    
    pso_match = pso_pattern.match(col)
    if pso_match:
        pso_scenario_cols[pso_match.group(1)] = col

# Sort labels for consistent layer ordering
sorted_labels = sorted(list(set(ga_scenario_cols.keys()) | set(pso_scenario_cols.keys())))

if not sorted_labels:
    print("Warning: No scenario result columns found in the CSV. Map will be empty or show basic GeoJSON.")

active_colormaps = [] # To manage added colormaps and prevent duplicates if legends are identical

for label in sorted_labels:
    human_readable_label = label.replace("_", " ") # e.g., "W1 0.2 W2 0.8"

    # --- GA Katmanı ---
    if label in ga_scenario_cols:
        ga_col_name = ga_scenario_cols[label]
        if ga_col_name in merged_gdf.columns and merged_gdf[ga_col_name].notna().any():
            min_val_ga = merged_gdf[ga_col_name].min()
            max_val_ga = merged_gdf[ga_col_name].max()
            
            # Handle case where min and max are the same (e.g., all values are 0)
            if min_val_ga == max_val_ga:
                max_val_ga += 1e-6 # Add a tiny epsilon to create a range for the colormap

            ga_colormap = linear.YlGn_09.scale(min_val_ga, max_val_ga)
            ga_colormap.caption = f"Yeni Yeşil Alan (GA) {human_readable_label} - m²"
            
            ga_layer = folium.FeatureGroup(name=f'GA: {human_readable_label}', show=False) # show=False initially
            folium.GeoJson(
                merged_gdf,
                style_function=lambda feature, col=ga_col_name, cmap=ga_colormap: {
                    'fillColor': cmap(feature['properties'][col]) if feature['properties'][col] is not None else 'gray',
                    'color': 'black',
                    'weight': 0.5,
                    'fillOpacity': 0.7,
                },
                tooltip=folium.GeoJsonTooltip(fields=['name', ga_col_name], # Use 'name' from GeoJSON properties
                                              aliases=['İlçe:', f'Yeni Alan GA ({human_readable_label}) m²:']),
                highlight_function=lambda x: {'weight':2, 'color':'red'},
            ).add_to(ga_layer)
            ga_layer.add_to(m)
            if ga_colormap.caption not in [cm.caption for cm in active_colormaps]:
                 ga_colormap.add_to(m)
                 active_colormaps.append(ga_colormap)
        else:
            print(f"Info: GA column '{ga_col_name}' for scenario '{label}' not found in merged data or is all NaN.")

    # --- PSO Katmanı ---
    if label in pso_scenario_cols:
        pso_col_name = pso_scenario_cols[label]
        if pso_col_name in merged_gdf.columns and merged_gdf[pso_col_name].notna().any():
            min_val_pso = merged_gdf[pso_col_name].min()
            max_val_pso = merged_gdf[pso_col_name].max()

            if min_val_pso == max_val_pso:
                max_val_pso += 1e-6

            pso_colormap = linear.YlOrRd_09.scale(min_val_pso, max_val_pso) # Example: YlOrRd for PSO
            pso_colormap.caption = f"Yeni Yeşil Alan (PSO) {human_readable_label} - m²"

            pso_layer = folium.FeatureGroup(name=f'PSO: {human_readable_label}', show=False) # show=False initially
            folium.GeoJson(
                merged_gdf,
                style_function=lambda feature, col=pso_col_name, cmap=pso_colormap: {
                    'fillColor': cmap(feature['properties'][col]) if feature['properties'][col] is not None else 'gray',
                    'color': 'black',
                    'weight': 0.5,
                    'fillOpacity': 0.7,
                },
                tooltip=folium.GeoJsonTooltip(fields=['name', pso_col_name], # Use 'name' from GeoJSON properties
                                              aliases=['İlçe:', f'Yeni Alan PSO ({human_readable_label}) m²:']),
                highlight_function=lambda x: {'weight':2, 'color':'blue'},
            ).add_to(pso_layer)
            pso_layer.add_to(m)
            if pso_colormap.caption not in [cm.caption for cm in active_colormaps]:
                 pso_colormap.add_to(m)
                 active_colormaps.append(pso_colormap)
        else:
            print(f"Info: PSO column '{pso_col_name}' for scenario '{label}' not found in merged data or is all NaN.")


# Add a base layer of district outlines if no scenario layers were added or for context
if not active_colormaps: # Or if you always want a base outline layer
    folium.GeoJson(
        gdf, # Use the original gdf for outlines
        name="District Outlines",
        style_function=lambda x: {'color': 'gray', 'weight': 1, 'fillOpacity': 0.1},
        tooltip=folium.GeoJsonTooltip(fields=['name'], aliases=['İlçe:'])
    ).add_to(m)


# === KATMAN KONTROLÜ ===
folium.LayerControl(collapsed=False).add_to(m)

# === HARİTAYI KAYDET ===
map_output_filename = "yesil_alan_haritasi_SCENARIOS.html"
m.save(map_output_filename)
print(f"Harita başarıyla oluşturuldu: {map_output_filename}")